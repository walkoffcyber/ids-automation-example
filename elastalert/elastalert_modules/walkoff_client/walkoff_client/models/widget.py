# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Widget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cols': 'int',
        'dashboard_id': 'str',
        'id_': 'str',
        'name': 'str',
        'options': 'object',
        'rows': 'int',
        'type_': 'str',
        'x': 'int',
        'y': 'int'
    }

    attribute_map = {
        'cols': 'cols',
        'dashboard_id': 'dashboard_id',
        'id_': 'id_',
        'name': 'name',
        'options': 'options',
        'rows': 'rows',
        'type_': 'type_',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, cols=None, dashboard_id=None, id_=None, name=None, options=None, rows=None, type_=None, x=None, y=None):  # noqa: E501
        """Widget - a model defined in OpenAPI"""  # noqa: E501

        self._cols = None
        self._dashboard_id = None
        self._id_ = None
        self._name = None
        self._options = None
        self._rows = None
        self._type_ = None
        self._x = None
        self._y = None
        self.discriminator = None

        self.cols = cols
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if id_ is not None:
            self.id_ = id_
        self.name = name
        self.options = options
        self.rows = rows
        if type_ is not None:
            self.type_ = type_
        self.x = x
        self.y = y

    @property
    def cols(self):
        """Gets the cols of this Widget.  # noqa: E501

        width of the widget  # noqa: E501

        :return: The cols of this Widget.  # noqa: E501
        :rtype: int
        """
        return self._cols

    @cols.setter
    def cols(self, cols):
        """Sets the cols of this Widget.

        width of the widget  # noqa: E501

        :param cols: The cols of this Widget.  # noqa: E501
        :type: int
        """
        if cols is None:
            raise ValueError("Invalid value for `cols`, must not be `None`")  # noqa: E501

        self._cols = cols

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this Widget.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The dashboard_id of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this Widget.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param dashboard_id: The dashboard_id of this Widget.  # noqa: E501
        :type: str
        """

        self._dashboard_id = dashboard_id

    @property
    def id_(self):
        """Gets the id_ of this Widget.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The id_ of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._id_

    @id_.setter
    def id_(self, id_):
        """Sets the id_ of this Widget.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param id_: The id_ of this Widget.  # noqa: E501
        :type: str
        """

        self._id_ = id_

    @property
    def name(self):
        """Gets the name of this Widget.  # noqa: E501

        Name of the widget  # noqa: E501

        :return: The name of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Widget.

        Name of the widget  # noqa: E501

        :param name: The name of this Widget.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def options(self):
        """Gets the options of this Widget.  # noqa: E501


        :return: The options of this Widget.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Widget.


        :param options: The options of this Widget.  # noqa: E501
        :type: object
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def rows(self):
        """Gets the rows of this Widget.  # noqa: E501

        height of the widget  # noqa: E501

        :return: The rows of this Widget.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Widget.

        height of the widget  # noqa: E501

        :param rows: The rows of this Widget.  # noqa: E501
        :type: int
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")  # noqa: E501

        self._rows = rows

    @property
    def type_(self):
        """Gets the type_ of this Widget.  # noqa: E501

        Type of widget  # noqa: E501

        :return: The type_ of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._type_

    @type_.setter
    def type_(self, type_):
        """Sets the type_ of this Widget.

        Type of widget  # noqa: E501

        :param type_: The type_ of this Widget.  # noqa: E501
        :type: str
        """

        self._type_ = type_

    @property
    def x(self):
        """Gets the x of this Widget.  # noqa: E501

        x position of the widget  # noqa: E501

        :return: The x of this Widget.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Widget.

        x position of the widget  # noqa: E501

        :param x: The x of this Widget.  # noqa: E501
        :type: int
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this Widget.  # noqa: E501

        y position of the widget  # noqa: E501

        :return: The y of this Widget.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Widget.

        y position of the widget  # noqa: E501

        :param y: The y of this Widget.  # noqa: E501
        :type: int
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Widget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
