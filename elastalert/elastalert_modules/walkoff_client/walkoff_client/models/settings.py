# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Settings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token_duration': 'float',
        'refresh_token_duration': 'float'
    }

    attribute_map = {
        'access_token_duration': 'access_token_duration',
        'refresh_token_duration': 'refresh_token_duration'
    }

    def __init__(self, access_token_duration=None, refresh_token_duration=None):  # noqa: E501
        """Settings - a model defined in OpenAPI"""  # noqa: E501

        self._access_token_duration = None
        self._refresh_token_duration = None
        self.discriminator = None

        if access_token_duration is not None:
            self.access_token_duration = access_token_duration
        if refresh_token_duration is not None:
            self.refresh_token_duration = refresh_token_duration

    @property
    def access_token_duration(self):
        """Gets the access_token_duration of this Settings.  # noqa: E501

        Time (in minutes) to allow an access token to persist. Should greater than the duration of the refresh token  # noqa: E501

        :return: The access_token_duration of this Settings.  # noqa: E501
        :rtype: float
        """
        return self._access_token_duration

    @access_token_duration.setter
    def access_token_duration(self, access_token_duration):
        """Sets the access_token_duration of this Settings.

        Time (in minutes) to allow an access token to persist. Should greater than the duration of the refresh token  # noqa: E501

        :param access_token_duration: The access_token_duration of this Settings.  # noqa: E501
        :type: float
        """
        if access_token_duration is not None and access_token_duration < 1:  # noqa: E501
            raise ValueError("Invalid value for `access_token_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._access_token_duration = access_token_duration

    @property
    def refresh_token_duration(self):
        """Gets the refresh_token_duration of this Settings.  # noqa: E501

        Time (in days) to allow a refresh token to persist. Should greater than the duration of the refresh token  # noqa: E501

        :return: The refresh_token_duration of this Settings.  # noqa: E501
        :rtype: float
        """
        return self._refresh_token_duration

    @refresh_token_duration.setter
    def refresh_token_duration(self, refresh_token_duration):
        """Sets the refresh_token_duration of this Settings.

        Time (in days) to allow a refresh token to persist. Should greater than the duration of the refresh token  # noqa: E501

        :param refresh_token_duration: The refresh_token_duration of this Settings.  # noqa: E501
        :type: float
        """
        if refresh_token_duration is not None and refresh_token_duration < 1:  # noqa: E501
            raise ValueError("Invalid value for `refresh_token_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._refresh_token_duration = refresh_token_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
