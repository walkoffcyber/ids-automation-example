# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AddScheduledTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'name': 'str',
        'status': 'str',
        'task_trigger': 'TaskTrigger',
        'workflows': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'status': 'status',
        'task_trigger': 'task_trigger',
        'workflows': 'workflows'
    }

    def __init__(self, description=None, name=None, status=None, task_trigger=None, workflows=None):  # noqa: E501
        """AddScheduledTask - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._name = None
        self._status = None
        self._task_trigger = None
        self._workflows = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.name = name
        if status is not None:
            self.status = status
        if task_trigger is not None:
            self.task_trigger = task_trigger
        if workflows is not None:
            self.workflows = workflows

    @property
    def description(self):
        """Gets the description of this AddScheduledTask.  # noqa: E501

        description of this task  # noqa: E501

        :return: The description of this AddScheduledTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddScheduledTask.

        description of this task  # noqa: E501

        :param description: The description of this AddScheduledTask.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AddScheduledTask.  # noqa: E501

        Name of this task  # noqa: E501

        :return: The name of this AddScheduledTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddScheduledTask.

        Name of this task  # noqa: E501

        :param name: The name of this AddScheduledTask.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this AddScheduledTask.  # noqa: E501

        Status of the task  # noqa: E501

        :return: The status of this AddScheduledTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddScheduledTask.

        Status of the task  # noqa: E501

        :param status: The status of this AddScheduledTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "stopped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_trigger(self):
        """Gets the task_trigger of this AddScheduledTask.  # noqa: E501


        :return: The task_trigger of this AddScheduledTask.  # noqa: E501
        :rtype: TaskTrigger
        """
        return self._task_trigger

    @task_trigger.setter
    def task_trigger(self, task_trigger):
        """Sets the task_trigger of this AddScheduledTask.


        :param task_trigger: The task_trigger of this AddScheduledTask.  # noqa: E501
        :type: TaskTrigger
        """

        self._task_trigger = task_trigger

    @property
    def workflows(self):
        """Gets the workflows of this AddScheduledTask.  # noqa: E501

        List if IDs of workflows attached to this task  # noqa: E501

        :return: The workflows of this AddScheduledTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this AddScheduledTask.

        List if IDs of workflows attached to this task  # noqa: E501

        :param workflows: The workflows of this AddScheduledTask.  # noqa: E501
        :type: list[str]
        """

        self._workflows = workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddScheduledTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
