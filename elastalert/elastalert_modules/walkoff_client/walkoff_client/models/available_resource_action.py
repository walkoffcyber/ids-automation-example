# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AvailableResourceAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actions': 'list[str]',
        'app_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'app_name': 'app_name',
        'name': 'name'
    }

    def __init__(self, actions=None, app_name=None, name=None):  # noqa: E501
        """AvailableResourceAction - a model defined in OpenAPI"""  # noqa: E501

        self._actions = None
        self._app_name = None
        self._name = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if app_name is not None:
            self.app_name = app_name
        if name is not None:
            self.name = name

    @property
    def actions(self):
        """Gets the actions of this AvailableResourceAction.  # noqa: E501

        A list of actions or permissions available for this resource  # noqa: E501

        :return: The actions of this AvailableResourceAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AvailableResourceAction.

        A list of actions or permissions available for this resource  # noqa: E501

        :param actions: The actions of this AvailableResourceAction.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def app_name(self):
        """Gets the app_name of this AvailableResourceAction.  # noqa: E501

        The name of the app associated with this resource, if applicable  # noqa: E501

        :return: The app_name of this AvailableResourceAction.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AvailableResourceAction.

        The name of the app associated with this resource, if applicable  # noqa: E501

        :param app_name: The app_name of this AvailableResourceAction.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def name(self):
        """Gets the name of this AvailableResourceAction.  # noqa: E501

        Name of the resource  # noqa: E501

        :return: The name of this AvailableResourceAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableResourceAction.

        Name of the resource  # noqa: E501

        :param name: The name of this AvailableResourceAction.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableResourceAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
