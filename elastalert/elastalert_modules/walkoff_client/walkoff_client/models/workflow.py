# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Workflow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'walkoff_type': 'str',
        'actions': 'list[Action]',
        'branches': 'list[Branch]',
        'conditions': 'list[Condition]',
        'description': 'str',
        'errors': 'list[str]',
        'execution_id': 'str',
        'id_': 'str',
        'is_valid': 'bool',
        'name': 'str',
        'start': 'str',
        'tags': 'list[str]',
        'transforms': 'list[Transform]',
        'triggers': 'list[Trigger]',
        'workflow_variables': 'list[WorkflowVariable]'
    }

    attribute_map = {
        'walkoff_type': '_walkoff_type',
        'actions': 'actions',
        'branches': 'branches',
        'conditions': 'conditions',
        'description': 'description',
        'errors': 'errors',
        'execution_id': 'execution_id',
        'id_': 'id_',
        'is_valid': 'is_valid',
        'name': 'name',
        'start': 'start',
        'tags': 'tags',
        'transforms': 'transforms',
        'triggers': 'triggers',
        'workflow_variables': 'workflow_variables'
    }

    def __init__(self, walkoff_type=None, actions=None, branches=None, conditions=None, description=None, errors=None, execution_id=None, id_=None, is_valid=None, name=None, start=None, tags=None, transforms=None, triggers=None, workflow_variables=None):  # noqa: E501
        """Workflow - a model defined in OpenAPI"""  # noqa: E501

        self._walkoff_type = None
        self._actions = None
        self._branches = None
        self._conditions = None
        self._description = None
        self._errors = None
        self._execution_id = None
        self._id_ = None
        self._is_valid = None
        self._name = None
        self._start = None
        self._tags = None
        self._transforms = None
        self._triggers = None
        self._workflow_variables = None
        self.discriminator = None

        if walkoff_type is not None:
            self.walkoff_type = walkoff_type
        if actions is not None:
            self.actions = actions
        if branches is not None:
            self.branches = branches
        if conditions is not None:
            self.conditions = conditions
        if description is not None:
            self.description = description
        if errors is not None:
            self.errors = errors
        if execution_id is not None:
            self.execution_id = execution_id
        if id_ is not None:
            self.id_ = id_
        if is_valid is not None:
            self.is_valid = is_valid
        self.name = name
        if start is not None:
            self.start = start
        if tags is not None:
            self.tags = tags
        if transforms is not None:
            self.transforms = transforms
        if triggers is not None:
            self.triggers = triggers
        if workflow_variables is not None:
            self.workflow_variables = workflow_variables

    @property
    def walkoff_type(self):
        """Gets the walkoff_type of this Workflow.  # noqa: E501

        Workflow type for json decoder  # noqa: E501

        :return: The walkoff_type of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._walkoff_type

    @walkoff_type.setter
    def walkoff_type(self, walkoff_type):
        """Sets the walkoff_type of this Workflow.

        Workflow type for json decoder  # noqa: E501

        :param walkoff_type: The walkoff_type of this Workflow.  # noqa: E501
        :type: str
        """

        self._walkoff_type = walkoff_type

    @property
    def actions(self):
        """Gets the actions of this Workflow.  # noqa: E501

        Action nodes in workflow  # noqa: E501

        :return: The actions of this Workflow.  # noqa: E501
        :rtype: list[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Workflow.

        Action nodes in workflow  # noqa: E501

        :param actions: The actions of this Workflow.  # noqa: E501
        :type: list[Action]
        """

        self._actions = actions

    @property
    def branches(self):
        """Gets the branches of this Workflow.  # noqa: E501

        Edges connecting nodes in workflow  # noqa: E501

        :return: The branches of this Workflow.  # noqa: E501
        :rtype: list[Branch]
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this Workflow.

        Edges connecting nodes in workflow  # noqa: E501

        :param branches: The branches of this Workflow.  # noqa: E501
        :type: list[Branch]
        """

        self._branches = branches

    @property
    def conditions(self):
        """Gets the conditions of this Workflow.  # noqa: E501

        Condition nodes in workflow  # noqa: E501

        :return: The conditions of this Workflow.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Workflow.

        Condition nodes in workflow  # noqa: E501

        :param conditions: The conditions of this Workflow.  # noqa: E501
        :type: list[Condition]
        """

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this Workflow.  # noqa: E501

        Description of the workflow  # noqa: E501

        :return: The description of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        Description of the workflow  # noqa: E501

        :param description: The description of this Workflow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def errors(self):
        """Gets the errors of this Workflow.  # noqa: E501

        Errors attached to this ExecutionElement  # noqa: E501

        :return: The errors of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Workflow.

        Errors attached to this ExecutionElement  # noqa: E501

        :param errors: The errors of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def execution_id(self):
        """Gets the execution_id of this Workflow.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The execution_id of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this Workflow.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param execution_id: The execution_id of this Workflow.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def id_(self):
        """Gets the id_ of this Workflow.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The id_ of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._id_

    @id_.setter
    def id_(self, id_):
        """Sets the id_ of this Workflow.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param id_: The id_ of this Workflow.  # noqa: E501
        :type: str
        """

        self._id_ = id_

    @property
    def is_valid(self):
        """Gets the is_valid of this Workflow.  # noqa: E501

        Is this workflow able to be run?  # noqa: E501

        :return: The is_valid of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this Workflow.

        Is this workflow able to be run?  # noqa: E501

        :param is_valid: The is_valid of this Workflow.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def name(self):
        """Gets the name of this Workflow.  # noqa: E501

        The name of the workflow.  # noqa: E501

        :return: The name of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.

        The name of the workflow.  # noqa: E501

        :param name: The name of this Workflow.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start(self):
        """Gets the start of this Workflow.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The start of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Workflow.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param start: The start of this Workflow.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def tags(self):
        """Gets the tags of this Workflow.  # noqa: E501

        Tag for workflow  # noqa: E501

        :return: The tags of this Workflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Workflow.

        Tag for workflow  # noqa: E501

        :param tags: The tags of this Workflow.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def transforms(self):
        """Gets the transforms of this Workflow.  # noqa: E501

        Transform nodes in workflow  # noqa: E501

        :return: The transforms of this Workflow.  # noqa: E501
        :rtype: list[Transform]
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this Workflow.

        Transform nodes in workflow  # noqa: E501

        :param transforms: The transforms of this Workflow.  # noqa: E501
        :type: list[Transform]
        """

        self._transforms = transforms

    @property
    def triggers(self):
        """Gets the triggers of this Workflow.  # noqa: E501

        Trigger nodes in workflow  # noqa: E501

        :return: The triggers of this Workflow.  # noqa: E501
        :rtype: list[Trigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this Workflow.

        Trigger nodes in workflow  # noqa: E501

        :param triggers: The triggers of this Workflow.  # noqa: E501
        :type: list[Trigger]
        """

        self._triggers = triggers

    @property
    def workflow_variables(self):
        """Gets the workflow_variables of this Workflow.  # noqa: E501

        The environment variables for this workflow  # noqa: E501

        :return: The workflow_variables of this Workflow.  # noqa: E501
        :rtype: list[WorkflowVariable]
        """
        return self._workflow_variables

    @workflow_variables.setter
    def workflow_variables(self, workflow_variables):
        """Sets the workflow_variables of this Workflow.

        The environment variables for this workflow  # noqa: E501

        :param workflow_variables: The workflow_variables of this Workflow.  # noqa: E501
        :type: list[WorkflowVariable]
        """

        self._workflow_variables = workflow_variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
