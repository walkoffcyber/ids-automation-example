# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WorkflowStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_at': 'datetime',
        'execution_id': 'str',
        'name': 'str',
        'node_statuses': 'list[NodeStatus]',
        'started_at': 'datetime',
        'status': 'str',
        'user': 'str',
        'workflow_id': 'str'
    }

    attribute_map = {
        'completed_at': 'completed_at',
        'execution_id': 'execution_id',
        'name': 'name',
        'node_statuses': 'node_statuses',
        'started_at': 'started_at',
        'status': 'status',
        'user': 'user',
        'workflow_id': 'workflow_id'
    }

    def __init__(self, completed_at=None, execution_id=None, name=None, node_statuses=None, started_at=None, status=None, user=None, workflow_id=None):  # noqa: E501
        """WorkflowStatus - a model defined in OpenAPI"""  # noqa: E501

        self._completed_at = None
        self._execution_id = None
        self._name = None
        self._node_statuses = None
        self._started_at = None
        self._status = None
        self._user = None
        self._workflow_id = None
        self.discriminator = None

        if completed_at is not None:
            self.completed_at = completed_at
        self.execution_id = execution_id
        self.name = name
        self.node_statuses = node_statuses
        if started_at is not None:
            self.started_at = started_at
        self.status = status
        if user is not None:
            self.user = user
        self.workflow_id = workflow_id

    @property
    def completed_at(self):
        """Gets the completed_at of this WorkflowStatus.  # noqa: E501

        The timestamp of the end of workflow execution  # noqa: E501

        :return: The completed_at of this WorkflowStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this WorkflowStatus.

        The timestamp of the end of workflow execution  # noqa: E501

        :param completed_at: The completed_at of this WorkflowStatus.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def execution_id(self):
        """Gets the execution_id of this WorkflowStatus.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The execution_id of this WorkflowStatus.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this WorkflowStatus.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param execution_id: The execution_id of this WorkflowStatus.  # noqa: E501
        :type: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def name(self):
        """Gets the name of this WorkflowStatus.  # noqa: E501

        The name of the workflow.  # noqa: E501

        :return: The name of this WorkflowStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowStatus.

        The name of the workflow.  # noqa: E501

        :param name: The name of this WorkflowStatus.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_statuses(self):
        """Gets the node_statuses of this WorkflowStatus.  # noqa: E501

        The statuses of the workflow nodes  # noqa: E501

        :return: The node_statuses of this WorkflowStatus.  # noqa: E501
        :rtype: list[NodeStatus]
        """
        return self._node_statuses

    @node_statuses.setter
    def node_statuses(self, node_statuses):
        """Sets the node_statuses of this WorkflowStatus.

        The statuses of the workflow nodes  # noqa: E501

        :param node_statuses: The node_statuses of this WorkflowStatus.  # noqa: E501
        :type: list[NodeStatus]
        """
        if node_statuses is None:
            raise ValueError("Invalid value for `node_statuses`, must not be `None`")  # noqa: E501

        self._node_statuses = node_statuses

    @property
    def started_at(self):
        """Gets the started_at of this WorkflowStatus.  # noqa: E501

        The timestamp of the start of workflow execution  # noqa: E501

        :return: The started_at of this WorkflowStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this WorkflowStatus.

        The timestamp of the start of workflow execution  # noqa: E501

        :param started_at: The started_at of this WorkflowStatus.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this WorkflowStatus.  # noqa: E501

        The current status of the workflow  # noqa: E501

        :return: The status of this WorkflowStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowStatus.

        The current status of the workflow  # noqa: E501

        :param status: The status of this WorkflowStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "EXECUTING", "PAUSED", "AWAITING_DATA", "COMPLETED", "ABORTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user(self):
        """Gets the user of this WorkflowStatus.  # noqa: E501

        The user that executed the workflow  # noqa: E501

        :return: The user of this WorkflowStatus.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WorkflowStatus.

        The user that executed the workflow  # noqa: E501

        :param user: The user of this WorkflowStatus.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowStatus.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The workflow_id of this WorkflowStatus.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowStatus.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param workflow_id: The workflow_id of this WorkflowStatus.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
