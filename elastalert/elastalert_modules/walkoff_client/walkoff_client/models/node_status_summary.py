# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NodeStatusSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_name': 'str',
        'execution_id': 'str',
        'label': 'str',
        'name': 'str',
        'node_id': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'execution_id': 'execution_id',
        'label': 'label',
        'name': 'name',
        'node_id': 'node_id'
    }

    def __init__(self, app_name=None, execution_id=None, label=None, name=None, node_id=None):  # noqa: E501
        """NodeStatusSummary - a model defined in OpenAPI"""  # noqa: E501

        self._app_name = None
        self._execution_id = None
        self._label = None
        self._name = None
        self._node_id = None
        self.discriminator = None

        self.app_name = app_name
        self.execution_id = execution_id
        self.label = label
        self.name = name
        self.node_id = node_id

    @property
    def app_name(self):
        """Gets the app_name of this NodeStatusSummary.  # noqa: E501

        The name of the app associated with the node  # noqa: E501

        :return: The app_name of this NodeStatusSummary.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this NodeStatusSummary.

        The name of the app associated with the node  # noqa: E501

        :param app_name: The app_name of this NodeStatusSummary.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def execution_id(self):
        """Gets the execution_id of this NodeStatusSummary.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The execution_id of this NodeStatusSummary.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this NodeStatusSummary.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param execution_id: The execution_id of this NodeStatusSummary.  # noqa: E501
        :type: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def label(self):
        """Gets the label of this NodeStatusSummary.  # noqa: E501

        The name of the node  # noqa: E501

        :return: The label of this NodeStatusSummary.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NodeStatusSummary.

        The name of the node  # noqa: E501

        :param label: The label of this NodeStatusSummary.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def name(self):
        """Gets the name of this NodeStatusSummary.  # noqa: E501

        The name of the node take by the node  # noqa: E501

        :return: The name of this NodeStatusSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeStatusSummary.

        The name of the node take by the node  # noqa: E501

        :param name: The name of this NodeStatusSummary.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this NodeStatusSummary.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The node_id of this NodeStatusSummary.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeStatusSummary.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param node_id: The node_id of this NodeStatusSummary.  # noqa: E501
        :type: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStatusSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
