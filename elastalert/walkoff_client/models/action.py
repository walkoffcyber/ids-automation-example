# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Action(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'walkoff_type': 'str',
        'app_name': 'str',
        'app_version': 'str',
        'errors': 'list[str]',
        'id_': 'str',
        'is_valid': 'bool',
        'label': 'str',
        'name': 'str',
        'parallel_parameter': 'Parameter',
        'parallelized': 'bool',
        'parameters': 'list[Parameter]',
        'position': 'Position',
        'priority': 'int'
    }

    attribute_map = {
        'walkoff_type': '_walkoff_type',
        'app_name': 'app_name',
        'app_version': 'app_version',
        'errors': 'errors',
        'id_': 'id_',
        'is_valid': 'is_valid',
        'label': 'label',
        'name': 'name',
        'parallel_parameter': 'parallel_parameter',
        'parallelized': 'parallelized',
        'parameters': 'parameters',
        'position': 'position',
        'priority': 'priority'
    }

    def __init__(self, walkoff_type=None, app_name=None, app_version=None, errors=None, id_=None, is_valid=None, label=None, name=None, parallel_parameter=None, parallelized=False, parameters=None, position=None, priority=3):  # noqa: E501
        """Action - a model defined in OpenAPI"""  # noqa: E501

        self._walkoff_type = None
        self._app_name = None
        self._app_version = None
        self._errors = None
        self._id_ = None
        self._is_valid = None
        self._label = None
        self._name = None
        self._parallel_parameter = None
        self._parallelized = None
        self._parameters = None
        self._position = None
        self._priority = None
        self.discriminator = None

        if walkoff_type is not None:
            self.walkoff_type = walkoff_type
        self.app_name = app_name
        self.app_version = app_version
        if errors is not None:
            self.errors = errors
        if id_ is not None:
            self.id_ = id_
        if is_valid is not None:
            self.is_valid = is_valid
        self.label = label
        self.name = name
        self.parallel_parameter = parallel_parameter
        if parallelized is not None:
            self.parallelized = parallelized
        if parameters is not None:
            self.parameters = parameters
        self.position = position
        if priority is not None:
            self.priority = priority

    @property
    def walkoff_type(self):
        """Gets the walkoff_type of this Action.  # noqa: E501

        Workflow type for json decoder  # noqa: E501

        :return: The walkoff_type of this Action.  # noqa: E501
        :rtype: str
        """
        return self._walkoff_type

    @walkoff_type.setter
    def walkoff_type(self, walkoff_type):
        """Sets the walkoff_type of this Action.

        Workflow type for json decoder  # noqa: E501

        :param walkoff_type: The walkoff_type of this Action.  # noqa: E501
        :type: str
        """

        self._walkoff_type = walkoff_type

    @property
    def app_name(self):
        """Gets the app_name of this Action.  # noqa: E501

        The app to which the action belongs  # noqa: E501

        :return: The app_name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this Action.

        The app to which the action belongs  # noqa: E501

        :param app_name: The app_name of this Action.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def app_version(self):
        """Gets the app_version of this Action.  # noqa: E501

        The version of the app to which the action belongs  # noqa: E501

        :return: The app_version of this Action.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this Action.

        The version of the app to which the action belongs  # noqa: E501

        :param app_version: The app_version of this Action.  # noqa: E501
        :type: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")  # noqa: E501

        self._app_version = app_version

    @property
    def errors(self):
        """Gets the errors of this Action.  # noqa: E501

        Errors attached to this ExecutionElement  # noqa: E501

        :return: The errors of this Action.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Action.

        Errors attached to this ExecutionElement  # noqa: E501

        :param errors: The errors of this Action.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def id_(self):
        """Gets the id_ of this Action.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The id_ of this Action.  # noqa: E501
        :rtype: str
        """
        return self._id_

    @id_.setter
    def id_(self, id_):
        """Sets the id_ of this Action.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param id_: The id_ of this Action.  # noqa: E501
        :type: str
        """

        self._id_ = id_

    @property
    def is_valid(self):
        """Gets the is_valid of this Action.  # noqa: E501

        are the parameters of this action valid?  # noqa: E501

        :return: The is_valid of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this Action.

        are the parameters of this action valid?  # noqa: E501

        :param is_valid: The is_valid of this Action.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def label(self):
        """Gets the label of this Action.  # noqa: E501

        User-specified label for the action  # noqa: E501

        :return: The label of this Action.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Action.

        User-specified label for the action  # noqa: E501

        :param label: The label of this Action.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label

    @property
    def name(self):
        """Gets the name of this Action.  # noqa: E501

        The name of the function this Action will take  # noqa: E501

        :return: The name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.

        The name of the function this Action will take  # noqa: E501

        :param name: The name of this Action.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parallel_parameter(self):
        """Gets the parallel_parameter of this Action.  # noqa: E501


        :return: The parallel_parameter of this Action.  # noqa: E501
        :rtype: Parameter
        """
        return self._parallel_parameter

    @parallel_parameter.setter
    def parallel_parameter(self, parallel_parameter):
        """Sets the parallel_parameter of this Action.


        :param parallel_parameter: The parallel_parameter of this Action.  # noqa: E501
        :type: Parameter
        """

        self._parallel_parameter = parallel_parameter

    @property
    def parallelized(self):
        """Gets the parallelized of this Action.  # noqa: E501


        :return: The parallelized of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._parallelized

    @parallelized.setter
    def parallelized(self, parallelized):
        """Sets the parallelized of this Action.


        :param parallelized: The parallelized of this Action.  # noqa: E501
        :type: bool
        """

        self._parallelized = parallelized

    @property
    def parameters(self):
        """Gets the parameters of this Action.  # noqa: E501

        The input parameters to the action  # noqa: E501

        :return: The parameters of this Action.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Action.

        The input parameters to the action  # noqa: E501

        :param parameters: The parameters of this Action.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def position(self):
        """Gets the position of this Action.  # noqa: E501


        :return: The position of this Action.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Action.


        :param position: The position of this Action.  # noqa: E501
        :type: Position
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def priority(self):
        """Gets the priority of this Action.  # noqa: E501

        The priority for this Action, which will be compared to other Actions with the same parent Action, descending, i.e. 5 is the highest priority.  # noqa: E501

        :return: The priority of this Action.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Action.

        The priority for this Action, which will be compared to other Actions with the same parent Action, descending, i.e. 5 is the highest priority.  # noqa: E501

        :param priority: The priority of this Action.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 5:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `5`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
