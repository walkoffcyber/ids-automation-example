# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WorkflowMetaData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'errors': 'list[str]',
        'id_': 'str',
        'is_valid': 'bool',
        'name': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'errors': 'errors',
        'id_': 'id_',
        'is_valid': 'is_valid',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, description=None, errors=None, id_=None, is_valid=None, name=None, tags=None):  # noqa: E501
        """WorkflowMetaData - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._errors = None
        self._id_ = None
        self._is_valid = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if errors is not None:
            self.errors = errors
        self.id_ = id_
        if is_valid is not None:
            self.is_valid = is_valid
        self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def description(self):
        """Gets the description of this WorkflowMetaData.  # noqa: E501

        Description of the workflow  # noqa: E501

        :return: The description of this WorkflowMetaData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowMetaData.

        Description of the workflow  # noqa: E501

        :param description: The description of this WorkflowMetaData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def errors(self):
        """Gets the errors of this WorkflowMetaData.  # noqa: E501

        Errors attached to this ExecutionElement  # noqa: E501

        :return: The errors of this WorkflowMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this WorkflowMetaData.

        Errors attached to this ExecutionElement  # noqa: E501

        :param errors: The errors of this WorkflowMetaData.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def id_(self):
        """Gets the id_ of this WorkflowMetaData.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The id_ of this WorkflowMetaData.  # noqa: E501
        :rtype: str
        """
        return self._id_

    @id_.setter
    def id_(self, id_):
        """Sets the id_ of this WorkflowMetaData.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param id_: The id_ of this WorkflowMetaData.  # noqa: E501
        :type: str
        """
        if id_ is None:
            raise ValueError("Invalid value for `id_`, must not be `None`")  # noqa: E501

        self._id_ = id_

    @property
    def is_valid(self):
        """Gets the is_valid of this WorkflowMetaData.  # noqa: E501

        Is this workflow able to be run?  # noqa: E501

        :return: The is_valid of this WorkflowMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this WorkflowMetaData.

        Is this workflow able to be run?  # noqa: E501

        :param is_valid: The is_valid of this WorkflowMetaData.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def name(self):
        """Gets the name of this WorkflowMetaData.  # noqa: E501

        The name of the workflow.  # noqa: E501

        :return: The name of this WorkflowMetaData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowMetaData.

        The name of the workflow.  # noqa: E501

        :param name: The name of this WorkflowMetaData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this WorkflowMetaData.  # noqa: E501

        Tag for workflow  # noqa: E501

        :return: The tags of this WorkflowMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkflowMetaData.

        Tag for workflow  # noqa: E501

        :param tags: The tags of this WorkflowMetaData.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
