# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Position(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'walkoff_type': 'str',
        'id_': 'str',
        'x': 'float',
        'y': 'float'
    }

    attribute_map = {
        'walkoff_type': '_walkoff_type',
        'id_': 'id_',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, walkoff_type=None, id_=None, x=None, y=None):  # noqa: E501
        """Position - a model defined in OpenAPI"""  # noqa: E501

        self._walkoff_type = None
        self._id_ = None
        self._x = None
        self._y = None
        self.discriminator = None

        if walkoff_type is not None:
            self.walkoff_type = walkoff_type
        if id_ is not None:
            self.id_ = id_
        self.x = x
        self.y = y

    @property
    def walkoff_type(self):
        """Gets the walkoff_type of this Position.  # noqa: E501

        Workflow type for json decoder  # noqa: E501

        :return: The walkoff_type of this Position.  # noqa: E501
        :rtype: str
        """
        return self._walkoff_type

    @walkoff_type.setter
    def walkoff_type(self, walkoff_type):
        """Sets the walkoff_type of this Position.

        Workflow type for json decoder  # noqa: E501

        :param walkoff_type: The walkoff_type of this Position.  # noqa: E501
        :type: str
        """

        self._walkoff_type = walkoff_type

    @property
    def id_(self):
        """Gets the id_ of this Position.  # noqa: E501

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :return: The id_ of this Position.  # noqa: E501
        :rtype: str
        """
        return self._id_

    @id_.setter
    def id_(self, id_):
        """Sets the id_ of this Position.

        A 32-bit hexadecimal string representing a globally unique identifier  # noqa: E501

        :param id_: The id_ of this Position.  # noqa: E501
        :type: str
        """

        self._id_ = id_

    @property
    def x(self):
        """Gets the x of this Position.  # noqa: E501

        The X coordinate for the Action  # noqa: E501

        :return: The x of this Position.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Position.

        The X coordinate for the Action  # noqa: E501

        :param x: The x of this Position.  # noqa: E501
        :type: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this Position.  # noqa: E501

        The Y coordinate for the Action  # noqa: E501

        :return: The y of this Position.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Position.

        The Y coordinate for the Action  # noqa: E501

        :param y: The y of this Position.  # noqa: E501
        :type: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
