# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AppApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actions': 'list[ActionApi]',
        'app_version': 'str',
        'contact_info': 'ApiContact',
        'description': 'str',
        'external_docs': 'list[ExternalDoc]',
        'license_info': 'ApiLicense',
        'name': 'str',
        'tags': 'list[ApiTag]',
        'walkoff_version': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'app_version': 'app_version',
        'contact_info': 'contact_info',
        'description': 'description',
        'external_docs': 'external_docs',
        'license_info': 'license_info',
        'name': 'name',
        'tags': 'tags',
        'walkoff_version': 'walkoff_version'
    }

    def __init__(self, actions=None, app_version=None, contact_info=None, description=None, external_docs=None, license_info=None, name=None, tags=None, walkoff_version=None):  # noqa: E501
        """AppApi - a model defined in OpenAPI"""  # noqa: E501

        self._actions = None
        self._app_version = None
        self._contact_info = None
        self._description = None
        self._external_docs = None
        self._license_info = None
        self._name = None
        self._tags = None
        self._walkoff_version = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if app_version is not None:
            self.app_version = app_version
        if contact_info is not None:
            self.contact_info = contact_info
        if description is not None:
            self.description = description
        if external_docs is not None:
            self.external_docs = external_docs
        if license_info is not None:
            self.license_info = license_info
        self.name = name
        if tags is not None:
            self.tags = tags
        if walkoff_version is not None:
            self.walkoff_version = walkoff_version

    @property
    def actions(self):
        """Gets the actions of this AppApi.  # noqa: E501

        Actions associated with this app  # noqa: E501

        :return: The actions of this AppApi.  # noqa: E501
        :rtype: list[ActionApi]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AppApi.

        Actions associated with this app  # noqa: E501

        :param actions: The actions of this AppApi.  # noqa: E501
        :type: list[ActionApi]
        """

        self._actions = actions

    @property
    def app_version(self):
        """Gets the app_version of this AppApi.  # noqa: E501

        A semantic version number of the API  # noqa: E501

        :return: The app_version of this AppApi.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this AppApi.

        A semantic version number of the API  # noqa: E501

        :param app_version: The app_version of this AppApi.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def contact_info(self):
        """Gets the contact_info of this AppApi.  # noqa: E501


        :return: The contact_info of this AppApi.  # noqa: E501
        :rtype: ApiContact
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this AppApi.


        :param contact_info: The contact_info of this AppApi.  # noqa: E501
        :type: ApiContact
        """

        self._contact_info = contact_info

    @property
    def description(self):
        """Gets the description of this AppApi.  # noqa: E501

        A longer description of the API. Should be different from the title.  # noqa: E501

        :return: The description of this AppApi.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppApi.

        A longer description of the API. Should be different from the title.  # noqa: E501

        :param description: The description of this AppApi.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def external_docs(self):
        """Gets the external_docs of this AppApi.  # noqa: E501


        :return: The external_docs of this AppApi.  # noqa: E501
        :rtype: list[ExternalDoc]
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this AppApi.


        :param external_docs: The external_docs of this AppApi.  # noqa: E501
        :type: list[ExternalDoc]
        """

        self._external_docs = external_docs

    @property
    def license_info(self):
        """Gets the license_info of this AppApi.  # noqa: E501


        :return: The license_info of this AppApi.  # noqa: E501
        :rtype: ApiLicense
        """
        return self._license_info

    @license_info.setter
    def license_info(self, license_info):
        """Sets the license_info of this AppApi.


        :param license_info: The license_info of this AppApi.  # noqa: E501
        :type: ApiLicense
        """

        self._license_info = license_info

    @property
    def name(self):
        """Gets the name of this AppApi.  # noqa: E501

        A unique and precise title of the API  # noqa: E501

        :return: The name of this AppApi.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppApi.

        A unique and precise title of the API  # noqa: E501

        :param name: The name of this AppApi.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this AppApi.  # noqa: E501


        :return: The tags of this AppApi.  # noqa: E501
        :rtype: list[ApiTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AppApi.


        :param tags: The tags of this AppApi.  # noqa: E501
        :type: list[ApiTag]
        """

        self._tags = tags

    @property
    def walkoff_version(self):
        """Gets the walkoff_version of this AppApi.  # noqa: E501

        A semantic version number of the API  # noqa: E501

        :return: The walkoff_version of this AppApi.  # noqa: E501
        :rtype: str
        """
        return self._walkoff_version

    @walkoff_version.setter
    def walkoff_version(self, walkoff_version):
        """Sets the walkoff_version of this AppApi.

        A semantic version number of the API  # noqa: E501

        :param walkoff_version: The walkoff_version of this AppApi.  # noqa: E501
        :type: str
        """

        self._walkoff_version = walkoff_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppApi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
