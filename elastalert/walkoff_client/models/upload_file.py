# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_name': 'str',
        'app_version': 'str',
        'file_data': 'object',
        'file_path': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'app_version': 'app_version',
        'file_data': 'file_data',
        'file_path': 'file_path'
    }

    def __init__(self, app_name=None, app_version=None, file_data=None, file_path=None):  # noqa: E501
        """UploadFile - a model defined in OpenAPI"""  # noqa: E501

        self._app_name = None
        self._app_version = None
        self._file_data = None
        self._file_path = None
        self.discriminator = None

        if app_name is not None:
            self.app_name = app_name
        if app_version is not None:
            self.app_version = app_version
        if file_data is not None:
            self.file_data = file_data
        self.file_path = file_path

    @property
    def app_name(self):
        """Gets the app_name of this UploadFile.  # noqa: E501

        The action to take on the executing workflow  # noqa: E501

        :return: The app_name of this UploadFile.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this UploadFile.

        The action to take on the executing workflow  # noqa: E501

        :param app_name: The app_name of this UploadFile.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_version(self):
        """Gets the app_version of this UploadFile.  # noqa: E501

        Version number of the directory they would like to write to  # noqa: E501

        :return: The app_version of this UploadFile.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this UploadFile.

        Version number of the directory they would like to write to  # noqa: E501

        :param app_version: The app_version of this UploadFile.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def file_data(self):
        """Gets the file_data of this UploadFile.  # noqa: E501

        The data that will be sent to the trigger  # noqa: E501

        :return: The file_data of this UploadFile.  # noqa: E501
        :rtype: object
        """
        return self._file_data

    @file_data.setter
    def file_data(self, file_data):
        """Sets the file_data of this UploadFile.

        The data that will be sent to the trigger  # noqa: E501

        :param file_data: The file_data of this UploadFile.  # noqa: E501
        :type: object
        """

        self._file_data = file_data

    @property
    def file_path(self):
        """Gets the file_path of this UploadFile.  # noqa: E501

        Path to the file they would like to overwrite or create  # noqa: E501

        :return: The file_path of this UploadFile.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this UploadFile.

        Path to the file they would like to overwrite or create  # noqa: E501

        :param file_path: The file_path of this UploadFile.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
