# coding: utf-8

"""
    WALKOFF

    An active cyber defense development framework enabling orchestration capabilities to be written once and deployed across WALKOFF-enabled orchestration tools. https://nsacyber.github.io/WALKOFF/  # noqa: E501

    The version of the OpenAPI document: 0.9.1
    Contact: walkoff@nsa.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ParameterApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'name': 'str',
        'parallelizable': 'bool',
        'placeholder': 'object',
        'required': 'bool',
        'schema': 'ParameterSchema'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'parallelizable': 'parallelizable',
        'placeholder': 'placeholder',
        'required': 'required',
        'schema': 'schema'
    }

    def __init__(self, description=None, name=None, parallelizable=False, placeholder=None, required=False, schema=None):  # noqa: E501
        """ParameterApi - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._name = None
        self._parallelizable = None
        self._placeholder = None
        self._required = None
        self._schema = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.name = name
        if parallelizable is not None:
            self.parallelizable = parallelizable
        if placeholder is not None:
            self.placeholder = placeholder
        if required is not None:
            self.required = required
        self.schema = schema

    @property
    def description(self):
        """Gets the description of this ParameterApi.  # noqa: E501

        Description of the parameter  # noqa: E501

        :return: The description of this ParameterApi.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParameterApi.

        Description of the parameter  # noqa: E501

        :param description: The description of this ParameterApi.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ParameterApi.  # noqa: E501


        :return: The name of this ParameterApi.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterApi.


        :param name: The name of this ParameterApi.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parallelizable(self):
        """Gets the parallelizable of this ParameterApi.  # noqa: E501

        Is this parameter parallelizable  # noqa: E501

        :return: The parallelizable of this ParameterApi.  # noqa: E501
        :rtype: bool
        """
        return self._parallelizable

    @parallelizable.setter
    def parallelizable(self, parallelizable):
        """Sets the parallelizable of this ParameterApi.

        Is this parameter parallelizable  # noqa: E501

        :param parallelizable: The parallelizable of this ParameterApi.  # noqa: E501
        :type: bool
        """

        self._parallelizable = parallelizable

    @property
    def placeholder(self):
        """Gets the placeholder of this ParameterApi.  # noqa: E501

        Brief description of the field to be used to prompt a user  # noqa: E501

        :return: The placeholder of this ParameterApi.  # noqa: E501
        :rtype: object
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this ParameterApi.

        Brief description of the field to be used to prompt a user  # noqa: E501

        :param placeholder: The placeholder of this ParameterApi.  # noqa: E501
        :type: object
        """

        self._placeholder = placeholder

    @property
    def required(self):
        """Gets the required of this ParameterApi.  # noqa: E501

        Is this parameter required  # noqa: E501

        :return: The required of this ParameterApi.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ParameterApi.

        Is this parameter required  # noqa: E501

        :param required: The required of this ParameterApi.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def schema(self):
        """Gets the schema of this ParameterApi.  # noqa: E501


        :return: The schema of this ParameterApi.  # noqa: E501
        :rtype: ParameterSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ParameterApi.


        :param schema: The schema of this ParameterApi.  # noqa: E501
        :type: ParameterSchema
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterApi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
